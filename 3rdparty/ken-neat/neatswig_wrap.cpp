/*
 * FILE : neatswig_wrap.c
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Build 883)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */

 
#define SWIGCODE
/* Implementation : GUILE */

#define SWIGGUILE
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/* -----------------------------------------------------------------------
 * swig_lib/guile/guile.swg
 *
 * Guile configuration file.  This file assumes FSF Guile 1.0.  It may not
 * work with other versions 
 * ----------------------------------------------------------------------- */

#include "guile/gh.h"

/* Since GUILE seems to be somewhat incomplete, these bindings
   are used in the SWIG generated code.   To change the Guile
   interface, simply change this file */

#define GH_NOT_PASSED    SCM_UNDEFINED

/*****************************************************************************
 * $Header: /cvsroot/SWIG1.1/swig_lib/swigptr.swg,v 1.2 1999/08/13 22:27:50 beazley Exp $
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SWIG_GLOBAL
#define SWIGSTATIC
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif



/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start > end) sp = 0;
	  /* Try to find a match for this */
	  while (start <= end) {
	    if (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strcpy(temp_type,tp->name);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	    }
	    sp++;
	    start++;
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#ifdef __cplusplus
}
#endif

#define SWIG_init    glist


#include <list>
//#include "networks.h"
#include "genetics.h"
#include "visual.h"
#include "experiments.h"
#include "neatmain.h"
extern double testdoubval();
extern double testdoubset(double );
extern NNode *new_NNode3arg(int ,int ,int );
static int  _wrap_const_NEWNODE = 0;
static int  _wrap_const_NEWLINK = 1;
extern Genome *new_Genome_fromfile(char *,int );
extern Genome *new_Genome_load(char *);
extern int print_Genome_tofile(Genome *,char *);
extern int print_Genome(Genome *);
extern Population *new_Pop_fromfile(char *);
extern Population *new_Pop_fromGenomefile(char *);
extern int xor_epoch(Population *,int ,char *,int &,int &,int &);
extern list< Innovation* > *new_innov_list();
extern Population *xor_test(int );
extern bool xor_evaluate(Organism *);
extern Population *pole1_test(int );
extern bool pole1_evaluate(Organism *);
SCM _wrap_gscm_testdoubval()
{
	 double  _result;
  SCM scmresult;  /* fun1 */
	 SCM_DEFER_INTS;
	 _result = (double )testdoubval();
	 SCM_ALLOW_INTS;
	 scmresult = gh_double2scm((double) _result);

	 return scmresult;
}
SCM _wrap_gscm_testdoubset(SCM s_0)
{
	 double  _result;
	 double  _arg0;
  SCM scmresult;  /* fun1 */
	 _arg0 = (double ) gh_scm2double(s_0);
	 SCM_DEFER_INTS;
	 _result = (double )testdoubset(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_double2scm((double) _result);

	 return scmresult;
}
SCM _wrap_gscm_new_NNode3arg(SCM s_0, SCM s_1, SCM s_2)
{
	 NNode * _result;
	 int  _arg0;
	 int  _arg1;
	 int  _arg2;
  char _ptemp[128];
  SCM scmresult;  /* fun1 */
	 _arg0 = (int ) gh_scm2long(s_0);
	 _arg1 = (int ) gh_scm2long(s_1);
	 _arg2 = (int ) gh_scm2long(s_2);
	 SCM_DEFER_INTS;
	 _result = (NNode *)new_NNode3arg(_arg0,_arg1,_arg2);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_NNode_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_var_NEWNODE(SCM s_0) {
	 SCM scmresult; /* fun2 */
	 if (s_0 != GH_NOT_PASSED) {
	}
	 scmresult = gh_long2scm((long) _wrap_const_NEWNODE);
	 return scmresult;
}
SCM _wrap_gscm_var_NEWLINK(SCM s_0) {
	 SCM scmresult; /* fun2 */
	 if (s_0 != GH_NOT_PASSED) {
	}
	 scmresult = gh_long2scm((long) _wrap_const_NEWLINK);
	 return scmresult;
}
SCM _wrap_gscm_new_Genome_fromfile(SCM s_0, SCM s_1)
{
	 Genome * _result;
	 char * _arg0;
	 int  _arg1;
  char _ptemp[128];
  int _len;
  SCM scmresult;  /* fun1 */
	 _arg0 = gh_scm2newstr(s_0, &_len);
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 _result = (Genome *)new_Genome_fromfile(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_display_Genome(SCM s_0, SCM s_1, SCM s_2)
{
	 Genome * _result;
	 char * _arg0;
	 int  _arg1;
	 int  _arg2;
  char _ptemp[128];
  int _len;
  SCM scmresult;  /* fun1 */
	 _arg0 = gh_scm2newstr(s_0, &_len);
	 _arg1 = (int ) gh_scm2long(s_1);
	 _arg2 = (int ) gh_scm2long(s_2);
	 SCM_DEFER_INTS;
	 _result = (Genome *)display_Genome(_arg0,_arg1,_arg2);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_new_Genome_load(SCM s_0)
{
	 Genome * _result;
	 char * _arg0;
  char _ptemp[128];
  int _len;
  SCM scmresult;  /* fun1 */
	 _arg0 = gh_scm2newstr(s_0, &_len);
	 SCM_DEFER_INTS;
	 _result = (Genome *)new_Genome_load(_arg0);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_print_Genome_tofile(SCM s_0, SCM s_1)
{
	 int  _result;
	 Genome * _arg0;
	 char * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = gh_scm2newstr(s_1, &_len);
	 SCM_DEFER_INTS;
	 _result = (int )print_Genome_tofile(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
SCM _wrap_gscm_print_Genome(SCM s_0)
{
	 int  _result;
	 Genome * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )print_Genome(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
SCM _wrap_gscm_new_Pop_fromfile(SCM s_0)
{
	 Population * _result;
	 char * _arg0;
  char _ptemp[128];
  int _len;
  SCM scmresult;  /* fun1 */
	 _arg0 = gh_scm2newstr(s_0, &_len);
	 SCM_DEFER_INTS;
	 _result = (Population *)new_Pop_fromfile(_arg0);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Population_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_new_Pop_fromGenomefile(SCM s_0)
{
	 Population * _result;
	 char * _arg0;
  char _ptemp[128];
  int _len;
  SCM scmresult;  /* fun1 */
	 _arg0 = gh_scm2newstr(s_0, &_len);
	 SCM_DEFER_INTS;
	 _result = (Population *)new_Pop_fromGenomefile(_arg0);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Population_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_xor_epoch(SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
	 int  _result;
	 Population * _arg0;
	 int  _arg1;
	 char * _arg2;
	 int * _arg3;
	 int * _arg4;
	 int * _arg5;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Population_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 _arg2 = gh_scm2newstr(s_2, &_len);
	 _tempc = gh_scm2newstr(s_3, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg3,"_int_p")) {
	}
	 _tempc = gh_scm2newstr(s_4, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg4,"_int_p")) {
	}
	 _tempc = gh_scm2newstr(s_5, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg5,"_int_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )xor_epoch(_arg0,_arg1,_arg2,*_arg3,*_arg4,*_arg5);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
SCM _wrap_gscm_new_innov_list()
{
	 list< Innovation* > * _result;
  char _ptemp[128];
  SCM scmresult;  /* fun1 */
	 SCM_DEFER_INTS;
	 _result = (list< Innovation* > *)new_innov_list();
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_list<_Innovation*_>_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_xor_test(SCM s_0)
{
	 Population * _result;
	 int  _arg0;
  char _ptemp[128];
  SCM scmresult;  /* fun1 */
	 _arg0 = (int ) gh_scm2long(s_0);
	 SCM_DEFER_INTS;
	 _result = (Population *)xor_test(_arg0);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Population_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_xor_evaluate(SCM s_0)
{
	 bool  _result;
	 Organism * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Organism_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (bool )xor_evaluate(_arg0);
	 SCM_ALLOW_INTS;

	 return scmresult;
}
SCM _wrap_gscm_pole1_test(SCM s_0)
{
	 Population * _result;
	 int  _arg0;
  char _ptemp[128];
  SCM scmresult;  /* fun1 */
	 _arg0 = (int ) gh_scm2long(s_0);
	 SCM_DEFER_INTS;
	 _result = (Population *)pole1_test(_arg0);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Population_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_pole1_evaluate(SCM s_0)
{
	 bool  _result;
	 Organism * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Organism_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (bool )pole1_evaluate(_arg0);
	 SCM_ALLOW_INTS;

	 return scmresult;
}
SCM _wrap_gscm_pole2_test(SCM s_0, SCM s_1)
{
	 Population * _result;
	 int  _arg0;
	 int  _arg1;
  char _ptemp[128];
  SCM scmresult;  /* fun1 */
	 _arg0 = (int ) gh_scm2long(s_0);
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 _result = (Population *)pole2_test(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Population_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
SCM _wrap_gscm_pole2_evaluate(SCM s_0, SCM s_1, SCM s_2)
{
	 bool  _result;
	 Organism * _arg0;
	 bool  _arg1;
	 CartPole * _arg2;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Organism_p")) {
	}
	 _tempc = gh_scm2newstr(s_2, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg2,"_CartPole_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (bool )pole2_evaluate(_arg0,_arg1,_arg2);
	 SCM_ALLOW_INTS;

	 return scmresult;
}
static char * Network_name_set(Network *obj, char *val) {
    if (obj->name) delete [] obj->name;
    obj->name = new char[strlen(val)+1];
    strcpy((char *)obj->name,val);
    return (char *) val;
}
SCM _wrap_gscm_Network_name_set(SCM s_0, SCM s_1)
{
	 char * _result;
	 Network * _arg0;
	 char * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _arg1 = gh_scm2newstr(s_1, &_len);
	 SCM_DEFER_INTS;
	 _result = (char *)Network_name_set(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_str02scm(_result);

	 return scmresult;
}
#define Network_name_get(_swigobj) ((char *) _swigobj->name)
SCM _wrap_gscm_Network_name_get(SCM s_0)
{
	 char * _result;
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (char *)Network_name_get(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_str02scm(_result);

	 return scmresult;
}
#define Network_net_id_set(_swigobj,_swigval) (_swigobj->net_id = _swigval,_swigval)
SCM _wrap_gscm_Network_net_id_set(SCM s_0, SCM s_1)
{
	 int  _result;
	 Network * _arg0;
	 int  _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 _result = (int )Network_net_id_set(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Network_net_id_get(_swigobj) ((int ) _swigobj->net_id)
SCM _wrap_gscm_Network_net_id_get(SCM s_0)
{
	 int  _result;
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )Network_net_id_get(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define delete_Network(_swigobj) (delete _swigobj)
SCM _wrap_gscm_delete_Network(SCM s_0)
{
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 delete_Network(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Network_flush(_swigobj)  (_swigobj->flush())
SCM _wrap_gscm_Network_flush(SCM s_0)
{
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 Network_flush(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Network_activate(_swigobj)  (_swigobj->activate())
SCM _wrap_gscm_Network_activate(SCM s_0)
{
	 bool  _result;
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (bool )Network_activate(_arg0);
	 SCM_ALLOW_INTS;

	 return scmresult;
}
#define Network_show_activation(_swigobj)  (_swigobj->show_activation())
SCM _wrap_gscm_Network_show_activation(SCM s_0)
{
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 Network_show_activation(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Network_add_input(_swigobj,_swigarg0)  (_swigobj->add_input(_swigarg0))
SCM _wrap_gscm_Network_add_input(SCM s_0, SCM s_1)
{
	 Network * _arg0;
	 NNode * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_NNode_p")) {
	}
	 SCM_DEFER_INTS;
	 Network_add_input(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Network_add_output(_swigobj,_swigarg0)  (_swigobj->add_output(_swigarg0))
SCM _wrap_gscm_Network_add_output(SCM s_0, SCM s_1)
{
	 Network * _arg0;
	 NNode * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_NNode_p")) {
	}
	 SCM_DEFER_INTS;
	 Network_add_output(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Network_load_sensors(_swigobj,_swigarg0)  (_swigobj->load_sensors(_swigarg0))
SCM _wrap_gscm_Network_load_sensors(SCM s_0, SCM s_1)
{
	 Network * _arg0;
	 double * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_double_p")) {
	}
	 SCM_DEFER_INTS;
	 Network_load_sensors(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Network_give_name(_swigobj,_swigarg0)  (_swigobj->give_name(_swigarg0))
SCM _wrap_gscm_Network_give_name(SCM s_0, SCM s_1)
{
	 Network * _arg0;
	 char * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _arg1 = gh_scm2newstr(s_1, &_len);
	 SCM_DEFER_INTS;
	 Network_give_name(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Network_nodecount(_swigobj)  (_swigobj->nodecount())
SCM _wrap_gscm_Network_nodecount(SCM s_0)
{
	 int  _result;
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )Network_nodecount(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Network_linkcount(_swigobj)  (_swigobj->linkcount())
SCM _wrap_gscm_Network_linkcount(SCM s_0)
{
	 int  _result;
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )Network_linkcount(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Network_input_start(_swigobj)  (_swigobj->input_start())
SCM _wrap_gscm_Network_input_start(SCM s_0)
{
	 int  _result;
	 Network * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )Network_input_start(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Network_load_in(_swigobj,_swigarg0)  (_swigobj->load_in(_swigarg0))
SCM _wrap_gscm_Network_load_in(SCM s_0, SCM s_1)
{
	 int  _result;
	 Network * _arg0;
	 double  _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _arg1 = (double ) gh_scm2double(s_1);
	 SCM_DEFER_INTS;
	 _result = (int )Network_load_in(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Network_graph(_swigobj,_swigarg0,_swigarg1)  (_swigobj->graph(_swigarg0,_swigarg1))
SCM _wrap_gscm_Network_graph(SCM s_0, SCM s_1, SCM s_2)
{
	 Network * _arg0;
	 int  _arg1;
	 int  _arg2;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Network_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 _arg2 = (int ) gh_scm2long(s_2);
	 SCM_DEFER_INTS;
	 Network_graph(_arg0,_arg1,_arg2);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_genome_id_set(_swigobj,_swigval) (_swigobj->genome_id = _swigval,_swigval)
SCM _wrap_gscm_Genome_genome_id_set(SCM s_0, SCM s_1)
{
	 int  _result;
	 Genome * _arg0;
	 int  _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 _result = (int )Genome_genome_id_set(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Genome_genome_id_get(_swigobj) ((int ) _swigobj->genome_id)
SCM _wrap_gscm_Genome_genome_id_get(SCM s_0)
{
	 int  _result;
	 Genome * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )Genome_genome_id_get(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Genome_phenotype_set(_swigobj,_swigval) (_swigobj->phenotype = _swigval,_swigval)
SCM _wrap_gscm_Genome_phenotype_set(SCM s_0, SCM s_1)
{
	 Network * _result;
	 Genome * _arg0;
	 Network * _arg1;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_Network_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (Network *)Genome_phenotype_set(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Network_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define Genome_phenotype_get(_swigobj) ((Network *) _swigobj->phenotype)
SCM _wrap_gscm_Genome_phenotype_get(SCM s_0)
{
	 Network * _result;
	 Genome * _arg0;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (Network *)Genome_phenotype_get(_arg0);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Network_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define new_Genome(_swigarg0,_swigarg1) (new Genome(_swigarg0,_swigarg1))
SCM _wrap_gscm_new_Genome(SCM s_0, SCM s_1)
{
	 Genome * _result;
	 int  _arg0;
	 ifstream * _arg1;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _arg0 = (int ) gh_scm2long(s_0);
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_ifstream_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (Genome *)new_Genome(_arg0,*_arg1);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define delete_Genome(_swigobj) (delete _swigobj)
SCM _wrap_gscm_delete_Genome(SCM s_0)
{
	 Genome * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 SCM_DEFER_INTS;
	 delete_Genome(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_genesis(_swigobj,_swigarg0)  (_swigobj->genesis(_swigarg0))
SCM _wrap_gscm_Genome_genesis(SCM s_0, SCM s_1)
{
	 Network * _result;
	 Genome * _arg0;
	 int  _arg1;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 _result = (Network *)Genome_genesis(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Network_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define Genome_print_to_file(_swigobj,_swigarg0)  (_swigobj->print_to_file(_swigarg0))
SCM _wrap_gscm_Genome_print_to_file(SCM s_0, SCM s_1)
{
	 Genome * _arg0;
	 ofstream * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_ofstream_p")) {
	}
	 SCM_DEFER_INTS;
	 Genome_print_to_file(_arg0,*_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_duplicate(_swigobj,_swigarg0)  (_swigobj->duplicate(_swigarg0))
SCM _wrap_gscm_Genome_duplicate(SCM s_0, SCM s_1)
{
	 Genome * _result;
	 Genome * _arg0;
	 int  _arg1;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 _result = (Genome *)Genome_duplicate(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define Genome_mutate_random_trait(_swigobj)  (_swigobj->mutate_random_trait())
SCM _wrap_gscm_Genome_mutate_random_trait(SCM s_0)
{
	 Genome * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 SCM_DEFER_INTS;
	 Genome_mutate_random_trait(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_mutate_link_trait(_swigobj,_swigarg0)  (_swigobj->mutate_link_trait(_swigarg0))
SCM _wrap_gscm_Genome_mutate_link_trait(SCM s_0, SCM s_1)
{
	 Genome * _arg0;
	 int  _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 Genome_mutate_link_trait(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_mutate_node_trait(_swigobj,_swigarg0)  (_swigobj->mutate_node_trait(_swigarg0))
SCM _wrap_gscm_Genome_mutate_node_trait(SCM s_0, SCM s_1)
{
	 Genome * _arg0;
	 int  _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 Genome_mutate_node_trait(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_mutate_link_weights(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->mutate_link_weights(_swigarg0,_swigarg1,_swigarg2))
SCM _wrap_gscm_Genome_mutate_link_weights(SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
	 Genome * _arg0;
	 double  _arg1;
	 double  _arg2;
	 int  _arg3;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = (double ) gh_scm2double(s_1);
	 _arg2 = (double ) gh_scm2double(s_2);
	 _arg3 = (int ) gh_scm2long(s_3);
	 SCM_DEFER_INTS;
	 Genome_mutate_link_weights(_arg0,_arg1,_arg2,_arg3);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_mutate_toggle_enable(_swigobj,_swigarg0)  (_swigobj->mutate_toggle_enable(_swigarg0))
SCM _wrap_gscm_Genome_mutate_toggle_enable(SCM s_0, SCM s_1)
{
	 Genome * _arg0;
	 int  _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 Genome_mutate_toggle_enable(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_mutate_gene_reenable(_swigobj)  (_swigobj->mutate_gene_reenable())
SCM _wrap_gscm_Genome_mutate_gene_reenable(SCM s_0)
{
	 Genome * _arg0;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 SCM_DEFER_INTS;
	 Genome_mutate_gene_reenable(_arg0);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
#define Genome_mutate_add_node(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->mutate_add_node(_swigarg0,_swigarg1,_swigarg2))
SCM _wrap_gscm_Genome_mutate_add_node(SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
	 int  _result;
	 Genome * _arg0;
	 list< Innovation* > * _arg1;
	 int * _arg2;
	 double * _arg3;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_list<_Innovation*_>_p")) {
	}
	 _tempc = gh_scm2newstr(s_2, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg2,"_int_p")) {
	}
	 _tempc = gh_scm2newstr(s_3, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg3,"_double_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (int )Genome_mutate_add_node(_arg0,*_arg1,*_arg2,*_arg3);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Genome_mutate_add_link(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->mutate_add_link(_swigarg0,_swigarg1,_swigarg2))
SCM _wrap_gscm_Genome_mutate_add_link(SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
	 int  _result;
	 Genome * _arg0;
	 list< Innovation* > * _arg1;
	 double * _arg2;
	 int  _arg3;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_list<_Innovation*_>_p")) {
	}
	 _tempc = gh_scm2newstr(s_2, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg2,"_double_p")) {
	}
	 _arg3 = (int ) gh_scm2long(s_3);
	 SCM_DEFER_INTS;
	 _result = (int )Genome_mutate_add_link(_arg0,*_arg1,*_arg2,_arg3);
	 SCM_ALLOW_INTS;
	 scmresult = gh_long2scm((long) _result);

	 return scmresult;
}
#define Genome_mate_multipoint(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->mate_multipoint(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
SCM _wrap_gscm_Genome_mate_multipoint(SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
	 Genome * _result;
	 Genome * _arg0;
	 Genome * _arg1;
	 int  _arg2;
	 double  _arg3;
	 double  _arg4;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_Genome_p")) {
	}
	 _arg2 = (int ) gh_scm2long(s_2);
	 _arg3 = (double ) gh_scm2double(s_3);
	 _arg4 = (double ) gh_scm2double(s_4);
	 SCM_DEFER_INTS;
	 _result = (Genome *)Genome_mate_multipoint(_arg0,_arg1,_arg2,_arg3,_arg4);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define Genome_mate_multipoint_avg(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->mate_multipoint_avg(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
SCM _wrap_gscm_Genome_mate_multipoint_avg(SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
	 Genome * _result;
	 Genome * _arg0;
	 Genome * _arg1;
	 int  _arg2;
	 double  _arg3;
	 double  _arg4;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_Genome_p")) {
	}
	 _arg2 = (int ) gh_scm2long(s_2);
	 _arg3 = (double ) gh_scm2double(s_3);
	 _arg4 = (double ) gh_scm2double(s_4);
	 SCM_DEFER_INTS;
	 _result = (Genome *)Genome_mate_multipoint_avg(_arg0,_arg1,_arg2,_arg3,_arg4);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define Genome_mate_singlepoint(_swigobj,_swigarg0,_swigarg1)  (_swigobj->mate_singlepoint(_swigarg0,_swigarg1))
SCM _wrap_gscm_Genome_mate_singlepoint(SCM s_0, SCM s_1, SCM s_2)
{
	 Genome * _result;
	 Genome * _arg0;
	 Genome * _arg1;
	 int  _arg2;
  char _ptemp[128];
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_Genome_p")) {
	}
	 _arg2 = (int ) gh_scm2long(s_2);
	 SCM_DEFER_INTS;
	 _result = (Genome *)Genome_mate_singlepoint(_arg0,_arg1,_arg2);
	 SCM_ALLOW_INTS;
	  SWIG_MakePtr(_ptemp, _result,"_Genome_p");
	 scmresult = gh_str02scm(_ptemp);

	 return scmresult;
}
#define Genome_compatibility(_swigobj,_swigarg0)  (_swigobj->compatibility(_swigarg0))
SCM _wrap_gscm_Genome_compatibility(SCM s_0, SCM s_1)
{
	 double  _result;
	 Genome * _arg0;
	 Genome * _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Genome_p")) {
	}
	 _tempc = gh_scm2newstr(s_1, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg1,"_Genome_p")) {
	}
	 SCM_DEFER_INTS;
	 _result = (double )Genome_compatibility(_arg0,_arg1);
	 SCM_ALLOW_INTS;
	 scmresult = gh_double2scm((double) _result);

	 return scmresult;
}
#define Population_epoch(_swigobj,_swigarg0)  (_swigobj->epoch(_swigarg0))
SCM _wrap_gscm_Population_epoch(SCM s_0, SCM s_1)
{
	 bool  _result;
	 Population * _arg0;
	 int  _arg1;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Population_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 SCM_DEFER_INTS;
	 _result = (bool )Population_epoch(_arg0,_arg1);
	 SCM_ALLOW_INTS;

	 return scmresult;
}
#define Population_visualize(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->visualize(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
SCM _wrap_gscm_Population_visualize(SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
	 Population * _arg0;
	 int  _arg1;
	 int  _arg2;
	 int  _arg3;
	 int  _arg4;
  char *_tempc;
  int _len;
  SCM scmresult;  /* fun1 */
	 _tempc = gh_scm2newstr(s_0, &_len);
	 if (SWIG_GetPtr(_tempc, (void **) &_arg0,"_Population_p")) {
	}
	 _arg1 = (int ) gh_scm2long(s_1);
	 _arg2 = (int ) gh_scm2long(s_2);
	 _arg3 = (int ) gh_scm2long(s_3);
	 _arg4 = (int ) gh_scm2long(s_4);
	 SCM_DEFER_INTS;
	 Population_visualize(_arg0,_arg1,_arg2,_arg3,_arg4);
	 SCM_ALLOW_INTS;
	 scmresult = gh_int2scm(1);

	 return scmresult;
}
/*
 * This table is used by the pointer type-checker
 */
static struct { char *n1; char *n2; void *(*pcnv)(void *); } _swig_mapping[] = {
    { "_signed_long","_long",0},
    { "_long","_unsigned_long",0},
    { "_long","_signed_long",0},
    { "_class_Population","_Population",0},
    { "_class_Network","_Network",0},
    { "_unsigned_long","_long",0},
    { "_signed_int","_int",0},
    { "_unsigned_short","_short",0},
    { "_signed_short","_short",0},
    { "_Genome","_class_Genome",0},
    { "_unsigned_int","_int",0},
    { "_short","_unsigned_short",0},
    { "_short","_signed_short",0},
    { "_int","_unsigned_int",0},
    { "_int","_signed_int",0},
    { "_class_Genome","_Genome",0},
    { "_Population","_class_Population",0},
    { "_Network","_class_Network",0},
{0,0,0}};

void glist() {
	 gh_new_procedure("testdoubval", (SCM (*)()) _wrap_gscm_testdoubval, 0, 0, 0);
	 gh_new_procedure("testdoubset", (SCM (*)()) _wrap_gscm_testdoubset, 1, 0, 0);
	 gh_new_procedure("new_NNode3arg", (SCM (*)()) _wrap_gscm_new_NNode3arg, 3, 0, 0);
	 gh_new_procedure("NEWNODE", (SCM (*)()) _wrap_gscm_var_NEWNODE, 0, 1, 0);
	 gh_new_procedure("NEWLINK", (SCM (*)()) _wrap_gscm_var_NEWLINK, 0, 1, 0);
	 gh_new_procedure("new_Genome_fromfile", (SCM (*)()) _wrap_gscm_new_Genome_fromfile, 2, 0, 0);
	 gh_new_procedure("display_Genome", (SCM (*)()) _wrap_gscm_display_Genome, 3, 0, 0);
	 gh_new_procedure("new_Genome_load", (SCM (*)()) _wrap_gscm_new_Genome_load, 1, 0, 0);
	 gh_new_procedure("print_Genome_tofile", (SCM (*)()) _wrap_gscm_print_Genome_tofile, 2, 0, 0);
	 gh_new_procedure("print_Genome", (SCM (*)()) _wrap_gscm_print_Genome, 1, 0, 0);
	 gh_new_procedure("new_Pop_fromfile", (SCM (*)()) _wrap_gscm_new_Pop_fromfile, 1, 0, 0);
	 gh_new_procedure("new_Pop_fromGenomefile", (SCM (*)()) _wrap_gscm_new_Pop_fromGenomefile, 1, 0, 0);
	 gh_new_procedure("xor_epoch", (SCM (*)()) _wrap_gscm_xor_epoch, 6, 0, 0);
	 gh_new_procedure("new_innov_list", (SCM (*)()) _wrap_gscm_new_innov_list, 0, 0, 0);
	 gh_new_procedure("xor_test", (SCM (*)()) _wrap_gscm_xor_test, 1, 0, 0);
	 gh_new_procedure("xor_evaluate", (SCM (*)()) _wrap_gscm_xor_evaluate, 1, 0, 0);
	 gh_new_procedure("pole1_test", (SCM (*)()) _wrap_gscm_pole1_test, 1, 0, 0);
	 gh_new_procedure("pole1_evaluate", (SCM (*)()) _wrap_gscm_pole1_evaluate, 1, 0, 0);
	 gh_new_procedure("pole2_test", (SCM (*)()) _wrap_gscm_pole2_test, 2, 0, 0);
	 gh_new_procedure("pole2_evaluate", (SCM (*)()) _wrap_gscm_pole2_evaluate, 3, 0, 0);
	 gh_new_procedure("Network_name_set", (SCM (*)()) _wrap_gscm_Network_name_set, 2, 0, 0);
	 gh_new_procedure("Network_name_get", (SCM (*)()) _wrap_gscm_Network_name_get, 1, 0, 0);
	 gh_new_procedure("Network_net_id_set", (SCM (*)()) _wrap_gscm_Network_net_id_set, 2, 0, 0);
	 gh_new_procedure("Network_net_id_get", (SCM (*)()) _wrap_gscm_Network_net_id_get, 1, 0, 0);
	 gh_new_procedure("delete_Network", (SCM (*)()) _wrap_gscm_delete_Network, 1, 0, 0);
	 gh_new_procedure("Network_flush", (SCM (*)()) _wrap_gscm_Network_flush, 1, 0, 0);
	 gh_new_procedure("Network_activate", (SCM (*)()) _wrap_gscm_Network_activate, 1, 0, 0);
	 gh_new_procedure("Network_show_activation", (SCM (*)()) _wrap_gscm_Network_show_activation, 1, 0, 0);
	 gh_new_procedure("Network_add_input", (SCM (*)()) _wrap_gscm_Network_add_input, 2, 0, 0);
	 gh_new_procedure("Network_add_output", (SCM (*)()) _wrap_gscm_Network_add_output, 2, 0, 0);
	 gh_new_procedure("Network_load_sensors", (SCM (*)()) _wrap_gscm_Network_load_sensors, 2, 0, 0);
	 gh_new_procedure("Network_give_name", (SCM (*)()) _wrap_gscm_Network_give_name, 2, 0, 0);
	 gh_new_procedure("Network_nodecount", (SCM (*)()) _wrap_gscm_Network_nodecount, 1, 0, 0);
	 gh_new_procedure("Network_linkcount", (SCM (*)()) _wrap_gscm_Network_linkcount, 1, 0, 0);
	 gh_new_procedure("Network_input_start", (SCM (*)()) _wrap_gscm_Network_input_start, 1, 0, 0);
	 gh_new_procedure("Network_load_in", (SCM (*)()) _wrap_gscm_Network_load_in, 2, 0, 0);
	 gh_new_procedure("Network_graph", (SCM (*)()) _wrap_gscm_Network_graph, 3, 0, 0);
	 gh_new_procedure("Genome_genome_id_set", (SCM (*)()) _wrap_gscm_Genome_genome_id_set, 2, 0, 0);
	 gh_new_procedure("Genome_genome_id_get", (SCM (*)()) _wrap_gscm_Genome_genome_id_get, 1, 0, 0);
	 gh_new_procedure("Genome_phenotype_set", (SCM (*)()) _wrap_gscm_Genome_phenotype_set, 2, 0, 0);
	 gh_new_procedure("Genome_phenotype_get", (SCM (*)()) _wrap_gscm_Genome_phenotype_get, 1, 0, 0);
	 gh_new_procedure("new_Genome", (SCM (*)()) _wrap_gscm_new_Genome, 2, 0, 0);
	 gh_new_procedure("delete_Genome", (SCM (*)()) _wrap_gscm_delete_Genome, 1, 0, 0);
	 gh_new_procedure("Genome_genesis", (SCM (*)()) _wrap_gscm_Genome_genesis, 2, 0, 0);
	 gh_new_procedure("Genome_print_to_file", (SCM (*)()) _wrap_gscm_Genome_print_to_file, 2, 0, 0);
	 gh_new_procedure("Genome_duplicate", (SCM (*)()) _wrap_gscm_Genome_duplicate, 2, 0, 0);
	 gh_new_procedure("Genome_mutate_random_trait", (SCM (*)()) _wrap_gscm_Genome_mutate_random_trait, 1, 0, 0);
	 gh_new_procedure("Genome_mutate_link_trait", (SCM (*)()) _wrap_gscm_Genome_mutate_link_trait, 2, 0, 0);
	 gh_new_procedure("Genome_mutate_node_trait", (SCM (*)()) _wrap_gscm_Genome_mutate_node_trait, 2, 0, 0);
	 gh_new_procedure("Genome_mutate_link_weights", (SCM (*)()) _wrap_gscm_Genome_mutate_link_weights, 4, 0, 0);
	 gh_new_procedure("Genome_mutate_toggle_enable", (SCM (*)()) _wrap_gscm_Genome_mutate_toggle_enable, 2, 0, 0);
	 gh_new_procedure("Genome_mutate_gene_reenable", (SCM (*)()) _wrap_gscm_Genome_mutate_gene_reenable, 1, 0, 0);
	 gh_new_procedure("Genome_mutate_add_node", (SCM (*)()) _wrap_gscm_Genome_mutate_add_node, 4, 0, 0);
	 gh_new_procedure("Genome_mutate_add_link", (SCM (*)()) _wrap_gscm_Genome_mutate_add_link, 4, 0, 0);
	 gh_new_procedure("Genome_mate_multipoint", (SCM (*)()) _wrap_gscm_Genome_mate_multipoint, 5, 0, 0);
	 gh_new_procedure("Genome_mate_multipoint_avg", (SCM (*)()) _wrap_gscm_Genome_mate_multipoint_avg, 5, 0, 0);
	 gh_new_procedure("Genome_mate_singlepoint", (SCM (*)()) _wrap_gscm_Genome_mate_singlepoint, 3, 0, 0);
	 gh_new_procedure("Genome_compatibility", (SCM (*)()) _wrap_gscm_Genome_compatibility, 2, 0, 0);
	 gh_new_procedure("Population_epoch", (SCM (*)()) _wrap_gscm_Population_epoch, 2, 0, 0);
	 gh_new_procedure("Population_visualize", (SCM (*)()) _wrap_gscm_Population_visualize, 5, 0, 0);
{
   int i;
   for (i = 0; _swig_mapping[i].n1; i++)
        SWIG_RegisterMapping(_swig_mapping[i].n1,_swig_mapping[i].n2,_swig_mapping[i].pcnv);
}
}
